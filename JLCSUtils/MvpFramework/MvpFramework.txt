

Each module of a system has its own namespace (under the system's namespace), with the following sub-namespaces:
  View
  ViewInterface (OR could be called "Common" OR items that would go here could just be in the module's namespace): The interface of the View and types related to the View shared between View and Presenter.
  Presenter
  PresenterInterface (optional) ?
  Model
Anything else in the module's namespace can be referenced by all of these namespaces.

Access Rules (to prevent MVP violations):
  Model (anything in a 'Model' namespace) cannot reference View or Presenter (namespaces).
  Presenter can't reference View (but references ViewInterface).
  Model can't reference UI system (WinForms in this case).
  Maybe: Presenter can't directly reference UI system (WinForms in this case).
  Only designated namespaces (ORM framework and specified custom code (probably a library)) can directly access the database system.

Automated enforcement:
  Some of these could be enforced by a security manager (or a class loader in Java).
  Static analysis by Reflection could check for disallowed references in declarations of types (type members, including method parameters).
  Static analysis of source code could check more thoroughly.



TODO:
    Interfaces for [Model/Presenter]BinderWrapper.
	Method for Presenter to cause a refresh of View controls binding a specified property of the model.
	General exception handler: Handles unhandled exceptions on anything invoked by the framework.
		Tester-Doer: If test rejects exception, it is isn't caught ?
		Default implementation shows an error dialog, and has a dependency of IMessageDialogService.
	Provide a way of declaring a mapping from properties of the View class (such as the title) to Model properties.
		Currently [ViewTitle] maps from Model to View.
	Bind using BindingContext.
	BinderString values to bind:
		- the caption for a specified property.
		- the validation message for a specified property.
		- all validation messages.
	Label control to show the caption for the property of the linked input control.
	Labelled edit control that maps the caption, and includes (optionally) a validation message and/or other validaity indication (colour or icon ('!' to right)).
	Auto generate controls (at runtime; could alternatively/also have a source code generator, for developers to edit afterwards).
	Auto generate IQueryable.
	Bind IQueryable to grid components, etc.
	Review Dialog layout.
	WinForms controls:
		*WinForms Validation events
		ValidationMode
	Utility to output a report of all handler IDs supported by each presenter, and referenced by each view.
	Role-based presenter interfaces: For consumer of presenter, and View.

Possible additions:
	Map handlers (by ID) to events on View Interface?
	Map handlers (by ID) from the view to methods on the Presenter Interface?

To Test:
	RefreshView(Control)  - to refresh control and children from model.
	Provide the ability to declare a property on the View to recieve the model (without the View having a type parameter).

Done:
	ViewBase.Bind: Could move most of the binding code from the View to the framework.
