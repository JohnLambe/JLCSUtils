

Each module of a system has its own namespace (under the system's namespace), with the following sub-namespaces:
  View
  ViewInterface (OR could be called "Common" OR items that would go here could just be in the module's namespace): The interface of the View and types related to the View shared between View and Presenter.
  Presenter
  PresenterInterface (optional) ?
  Model
Anything else in the module's namespace can be referenced by all of these namespaces.

Access Rules (to prevent MVP violations):
  Model (anything in a 'Model' namespace) cannot reference View or Presenter (namespaces).
  Presenter can't reference View (but references ViewInterface).
  Model can't reference UI system (WinForms in this case).
  Maybe: Presenter can't directly reference UI system (WinForms in this case).
  Only designated namespaces (ORM framework and specified custom code (probably a library)) can directly access the database system.

Automated enforcement:
  Some of these could be enforced by a security manager (or a class loader in Java).
  Static analysis by Reflection could check for disallowed references in declarations of types (type members, including method parameters).
  Static analysis of source code could check more thoroughly.



TODO:
    Interfaces for [Model/Presenter]BinderWrapper
	Method for Presenter to cause a refresh of View controls binding a specified property of the model.
	Provide a way of declaring a mapping from properties of the View class (such as the title) to Model properties.
		Currently [ViewTitle] maps from Model to View.
	Bind using BindingContext.

To Test:
	RefreshView(Control)  - to refresh control and children from model.
	Provide the ability to declare a property on the View to recieve the model (without the View having a type parameter).

Done:
	ViewBase.Bind: Could move most of the binding code from the View to the framework.
