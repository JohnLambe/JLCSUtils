using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using JohnLambe.Util.Collections;

namespace DiExtension.ConfigInject
{
    /// <summary>
    /// Prioritised list of <see cref="IConfigProvider"/>s.
    /// <para>Each item in the chain is called, in order, until one successfully returns a value for the given key.
    /// </para>
    /// </summary>
    public class ConfigProviderChain : IConfigProvider
    {
        /// <summary>
        /// Invokes each provider until one is found that can resolve the given key.
        /// If all fail, this returns false.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="key"></param>
        /// <param name="requiredType"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public bool GetValue<T>(string key, Type requiredType, out T value)
        {
            foreach(var provider in _providers.Values)
            {
                bool resolved = provider.GetValue<T>(key, requiredType, out value);
                if (resolved)
                    return true;
            }
            value = default(T);
            return false;
        }

        /// <summary>
        /// Add a provider to the chain.
        /// </summary>
        /// <param name="provider"></param>
        /// <param name="priority"></param>
        public virtual void RegisterProvider(IConfigProvider provider, int priority = DefaultPriority)
        {
            _providers.Add(((long)priority << 32) | _count++, provider);
            //TODO:
            // This would overflow after 2^32 register calls (even if all items were removed).
            // We could get the highest unused value for the low 32 bits, for the given priority.
        }

        /// <summary>
        /// Remove a provider from the chain.
        /// </summary>
        /// <param name="provider"></param>
        /// <returns></returns>
        public virtual bool RemoveProvider(IConfigProvider provider)
        {
            return _providers.RemoveByValue(provider);
        }

        /* Probably not that useful.
        /// <summary>
        ///
        /// </summary>
        /// <param name="value"></param>
        /// <param name="priority"></param>
        public virtual void RegisterObject(object value, int priority = DefaultPriority)
        {
            _providers.Add(priority, new ObjectValueProvider(value));
        }
        */

        public const int DefaultPriority = 20000;

        /// <summary>
        /// The list of providers.
        /// The high 32 bits of the key is the priority.
        /// The low 32 bits is generated by this class so that items registered with the same priority
        /// appear in the order that they are registered.
        /// </summary>
        protected SortedList<long,IConfigProvider> _providers = new SortedList<long,IConfigProvider>();

        /// <summary>
        /// Used for generating the low 32 bits of the key to <see cref="_providers"/>.
        /// </summary>
        protected uint _count = 0;
    }
}
