TODO:

Method injection ? (How often would it be used? Can use SimpleInjector context-based injection instead.)
	InjectAttribute on method.
	On ExpressionBuilding, scan for relevant methods, sort, and build an Expression to invoke them, then the existing Expression ?
	Or RegisterInitializer .

*Config inject with delegate.
Specify whether to cache for each registration.

Resolve by type, then inject only a property value of the resolved instance: ?
	e.g.	[Inject(typeof(User),"Name")]  // inject the user name (User.Name)

ChainableContext

*Constructor Parameter Injection with [Inject]

More automatic registration.


Locating Presenter for Model:
	- Attribute on presenter to indicate supported Model types.
	- Attributed constructor parameter (to flag a parameter as the model).
	- Generic type parameter?

Change exceptions to ActivationException ?

Event injection:
	- On creating event handler object, add it to relevant event handlers on existing objects previously created by DI container.
	- Shared handler (InjectAttribute.Shared)?: On injecting, look for existing handler (created by the same container), before creating a new one.
