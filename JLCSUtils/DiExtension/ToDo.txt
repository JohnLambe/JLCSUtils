TODO:

Method injection ? (How often would it be used? Can use SimpleInjector context-based injection instead.)
	InjectAttribute on method.
	On ExpressionBuilding, scan for relevant methods, sort, and build an Expression to invoke them, then the existing Expression ?
	Or RegisterInitializer .

*Config inject with delegate.
Specify whether to cache for each registration.

Resolve by type, then inject only a property value of the resolved instance: ?
	e.g.	[Inject(typeof(User),"Name")]  // inject the user name (User.Name)

ChainableContext

*Constructor Parameter Injection with [Inject]

More automatic registration.



Change exceptions to ActivationException ?

Event injection:
	- On creating event handler object, add it to relevant event handlers on existing objects previously created by DI container.
	- Shared handler: On injecting, look for existing handler (created by the same container), before creating a new one.

Injection of Static Properties.
Injection of Static Methods.

Factories:
	Automatically creating and invoking a factory when its return type is requested from DI.
	When interface return type of factory (or delegate to create instance) is requested from DI, generate proxy (dyanmic object, implementing interface using Impromptu Interface) that creates instance on first call to a member.
	When a factory or delegate of any type that could be resolved is requested, return a factory/delegate that invokes the DI container to resolve the item.

Injection of owner (the instance receiving the item being injected) on property/method injection.

Restriction on what can be injected, by type and receiving type (or namespace or attributes).

Register a singleton (or attribute a type to do this by default?) to have clones injected.
